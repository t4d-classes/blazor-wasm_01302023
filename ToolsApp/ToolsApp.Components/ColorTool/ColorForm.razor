@using Microsoft.JSInterop

@inject IJSRuntime JS

<EditForm Model="@colorForm" OnValidSubmit="@submitColor">

  <DataAnnotationsValidator />
  <ValidationSummary />

  <label>
    Name:
    <InputText id="colorFormName" @bind-Value="@colorForm.Name" />
    <ValidationMessage For="() => colorForm.Name" />
  </label>
  <label>
    Hex Code:
    <InputText @bind-Value="@colorForm.HexCode" />
    <ValidationMessage For="() => colorForm.HexCode" />
  </label>
  <button>@ButtonText</button>
</EditForm>

@code {

  [Parameter]
  public string ButtonText { get; set; } = "Submit Color";

  [Parameter]
  public EventCallback<INewColor> OnSubmitColor { get; set; }

  private ColorFormModel colorForm = new();

  private IMapper _mapper;

  protected override void OnInitialized()
  {
    base.OnInitialized();

    var mapperConfig = new MapperConfiguration(config => {
      config.CreateMap<ColorFormModel, NewColor>();
    });

    _mapper = mapperConfig.CreateMapper();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await JS.InvokeVoidAsync("app.setFocus", "#colorFormName");
    }
  }

  private async Task submitColor()
  {
    var newColor = _mapper.Map<NewColor>(colorForm);
    colorForm.Name = "";
    colorForm.HexCode = "";
    await OnSubmitColor.InvokeAsync(_mapper.Map<NewColor>(newColor));
    await JS.InvokeVoidAsync("app.setFocus", "#colorFormName");
  }

  class ColorFormModel
  {
    [Required]
    public string Name { get; set; }
    [Required]
    [HexString]
    public string HexCode { get; set; }
  }

}
